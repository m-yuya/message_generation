/* Auto-generated by genmsg_cpp for file tutorials/user.msg */
#ifndef TUTORIALS_MESSAGE_USER_H
#define TUTORIALS_MESSAGE_USER_H

#include "ros/serialization.h"
#include <string>
#include <vector>
#include <map>
#include <ostream>

namespace tutorials
{
template <class ContainerAllocator>
struct user_ {
  typedef user_<ContainerAllocator> Type;

  user_()
  : data()
  , num(0)
  {
  }

  user_(const ContainerAllocator& _alloc)
  : data(_alloc)
  , num(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  data;

  typedef int32_t _num_type;
  int32_t num;


  typedef ::std::shared_ptr< ::tutorials::user_<ContainerAllocator> > Ptr;
  typedef ::std::shared_ptr< ::tutorials::user_<ContainerAllocator>  const> ConstPtr;
}; // struct user
typedef  ::tutorials::user_<std::allocator<void> > user;

typedef ::std::shared_ptr< ::tutorials::user> userPtr;
typedef ::std::shared_ptr< ::tutorials::user const> userConstPtr;


} // namespace tutorials

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tutorials::user_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
    stream.next(m.num);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct user_
} // namespace serialization
} // namespace ros

#endif // TUTORIALS_MESSAGE_USER_H

