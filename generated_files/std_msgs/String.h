/* Auto-generated by genmsg_cpp for file std_msgs/String.msg */
#ifndef STD_MSGS_MESSAGE_STRING_H
#define STD_MSGS_MESSAGE_STRING_H

#include "ros/serialization.h"
#include <string>
#include <vector>
#include <map>
#include <ostream>

namespace std_msgs
{
template <class ContainerAllocator>
struct String_ {
  typedef String_<ContainerAllocator> Type;

  String_()
  : data()
  {
  }

  String_(const ContainerAllocator& _alloc)
  : data(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  data;


  typedef ::std::shared_ptr< ::std_msgs::String_<ContainerAllocator> > Ptr;
  typedef ::std::shared_ptr< ::std_msgs::String_<ContainerAllocator>  const> ConstPtr;
}; // struct String
typedef  ::std_msgs::String_<std::allocator<void> > String;

typedef ::std::shared_ptr< ::std_msgs::String> StringPtr;
typedef ::std::shared_ptr< ::std_msgs::String const> StringConstPtr;


} // namespace std_msgs

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::std_msgs::String_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct String_
} // namespace serialization
} // namespace ros

#endif // STD_MSGS_MESSAGE_STRING_H

